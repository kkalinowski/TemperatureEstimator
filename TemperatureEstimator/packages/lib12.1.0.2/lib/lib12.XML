<?xml version="1.0"?>
<doc>
    <assembly>
        <name>lib12</name>
    </assembly>
    <members>
        <member name="M:lib12.Collections.DictionaryExtension.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the value for given key or default if key doesn't exist in dictionary
            </summary>
            <param name="dict">Dictionary</param>
            <param name="key">The key</param>
            <returns></returns>
        </member>
        <member name="M:lib12.Collections.IEnumerableDefaultExtension.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Computes average, returns default value if collection is empty
            </summary>
            <param name="enumerable">The enumerable to get items</param>
            <param name="selector">The selector to get values</param>
            <returns>Average if enumerable is not empty, else zero</returns>
        </member>
        <member name="M:lib12.Collections.IEnumerableDefaultExtension.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes average, returns default value if collection is empty
            </summary>
            <param name="enumerable">The enumerable to get items</param>
            <param name="selector">The selector to get values</param>
            <returns>Average if enumerable is not empty, else null</returns>
        </member>
        <member name="M:lib12.Collections.IEnumerableDefaultExtension.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Computes average, returns default value if collection is empty
            </summary>
            <param name="enumerable">The enumerable to get items</param>
            <param name="selector">The selector to get values</param>
            <returns>Average if enumerable is not empty, else zero</returns>
        </member>
        <member name="M:lib12.Collections.IEnumerableDefaultExtension.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes average, returns default value if collection is empty
            </summary>
            <param name="enumerable">The enumerable to get items</param>
            <param name="selector">The selector to get values</param>
            <returns>Average if enumerable is not empty, else null</returns>
        </member>
        <member name="M:lib12.Collections.IEnumerableDefaultExtension.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Computes average, returns default value if collection is empty
            </summary>
            <param name="enumerable">The enumerable to get items</param>
            <param name="selector">The selector to get values</param>
            <returns>Average if enumerable is not empty, else zero</returns>
        </member>
        <member name="M:lib12.Collections.IEnumerableDefaultExtension.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes average, returns default value if collection is empty
            </summary>
            <param name="enumerable">The enumerable to get items</param>
            <param name="selector">The selector to get values</param>
            <returns>Average if enumerable is not empty, else null</returns>
        </member>
        <member name="M:lib12.Collections.IEnumerableDefaultExtension.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Computes average, returns default value if collection is empty
            </summary>
            <param name="enumerable">The enumerable to get items</param>
            <param name="selector">The selector to get values</param>
            <returns>Average if enumerable is not empty, else zero</returns>
        </member>
        <member name="M:lib12.Collections.IEnumerableDefaultExtension.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes average, returns default value if collection is empty
            </summary>
            <param name="enumerable">The enumerable to get items</param>
            <param name="selector">The selector to get values</param>
            <returns>Average if enumerable is not empty, else null</returns>
        </member>
        <member name="M:lib12.Collections.IEnumerableDefaultExtension.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Computes average, returns default value if collection is empty
            </summary>
            <param name="enumerable">The enumerable to get items</param>
            <param name="selector">The selector to get values</param>
            <returns>Average if enumerable is not empty, else zero</returns>
        </member>
        <member name="M:lib12.Collections.IEnumerableDefaultExtension.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes average, returns default value if collection is empty
            </summary>
            <param name="enumerable">The enumerable to get items</param>
            <param name="selector">The selector to get values</param>
            <returns>Average if enumerable is not empty, else null</returns>
        </member>
        <member name="M:lib12.Collections.IListExtension.RemoveRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes from collection elements from other collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list to remove elements from</param>
            <param name="toRemove">Elements to remove</param>
        </member>
        <member name="M:lib12.Collections.IListExtension.RemoveRange``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Removes items by condition
            </summary>
            <param name="list">List of items</param>
            <param name="condition">Condition to remove item</param>
        </member>
        <member name="M:lib12.Collections.IEnumerableExtension.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified enumerable is empty.
            </summary>
            <param name="enumerable">The enumerable to check</param>
            <returns>True if enumerable is empty</returns>
        </member>
        <member name="M:lib12.Collections.IEnumerableExtension.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether enumerable is null or empty
            </summary>
            <param name="enumerable">The enumerable to check</param>
            <returns>True if enumerable is null or empty</returns>
        </member>
        <member name="M:lib12.Collections.IEnumerableExtension.IsNotEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether enumerable is not empty
            </summary>
            <param name="enumerable">The enumerable to check</param>
            <returns>True if enumerable is not empty</returns>
        </member>
        <member name="M:lib12.Collections.IEnumerableExtension.IsNotNullAndNotEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether enumerable is not null and not empty
            </summary>
            <param name="enumerable">The enumerable to check</param>
            <returns>True if enumerable is not null and not empty</returns>
        </member>
        <member name="M:lib12.Collections.IEnumerableExtension.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Invoke action for each element in enumerable
            </summary>
            <param name="enumeration">The enumeration of items to invoke action on</param>
            <param name="action">The action to invoke</param>
        </member>
        <member name="M:lib12.Collections.IEnumerableExtension.ToObservableCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts enumerable to observable collection.
            </summary>
            <param name="enumeration">The enumeration to convert</param>
            <returns>Converted observable collection</returns>
        </member>
        <member name="M:lib12.Collections.IEnumerableExtension.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Converterts enumerable to delimited string
            </summary>
            <param name="enumerable">The enumerable to convert</param>
            <param name="delimiter">The delimiter to use</param>
            <returns>Delimited string</returns>
        </member>
        <member name="M:lib12.Collections.IEnumerableExtension.CollectionCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Compares the content of two collections for equality.
            http://stackoverflow.com/questions/50098/comparing-two-collections-for-equality
            </summary>
            <param name="first">The first collection.</param>
            <param name="second">The second collection.</param>
            <returns>True if both collections have the same content, false otherwise.</returns>
        </member>
        <member name="M:lib12.Collections.IEnumerableExtension.CastToEnumerable``1(System.Object)">
            <summary>
            Casts object to generic IEnumerable
            </summary>
            <param name="toCast">Object to cast</param>
            <returns>Generic IEnumerable or null if it's possible</returns>
        </member>
        <member name="M:lib12.Collections.IEnumerableExtension.ContainsOneElement``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether collection contains exactly one element
            </summary>
            <param name="enumerable">Collection to check</param>
        </member>
        <member name="M:lib12.Collections.IEnumerableExtension.ContainsMultipleElements``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether collection contains exactly more than one element
            </summary>
            <param name="enumerable">Collection to check</param>
        </member>
        <member name="M:lib12.Collections.IEnumerableExtension.GetNextElementOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Gets the next element after given or default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable to search</param>
            <param name="currentElement">The current element</param>
            <returns></returns>
        </member>
        <member name="M:lib12.Collections.IEnumerableExtension.GetPreviousElementOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Gets the previous element before given or default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable to search</param>
            <param name="currentElement">The current element</param>
            <returns></returns>
        </member>
        <member name="M:lib12.Collections.IEnumerableExtension.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Takes last X elements
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable to take elements from</param>
            <param name="count">The count to take</param>
            <returns></returns>
        </member>
        <member name="T:lib12.Core.Empty">
            <summary>
            Handles empty objects creation
            </summary>
        </member>
        <member name="M:lib12.Core.Empty.Array``1">
            <summary>
            Returns empty array of given type
            </summary>
            <typeparam name="T">Type of array</typeparam>
            <returns></returns>
        </member>
        <member name="M:lib12.Core.Empty.List``1">
            <summary>
            Returns empty list of given type
            </summary>
            <typeparam name="T">Type of list</typeparam>
            <returns></returns>
        </member>
        <member name="M:lib12.Core.Empty.Dictionary``2">
            <summary>
            Returns empty dictionary of given type
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <returns></returns>
        </member>
        <member name="T:lib12.Core.PropertyComparer`1">
            <summary>
            Compares two objects based on property value
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:lib12.Crypto.SaltedHash">
            <summary>
            Helps produce salted hash
            </summary>
        </member>
        <member name="M:lib12.Crypto.SaltedHash.GenerateSalt">
            <summary>
            Generates random salt.
            </summary>
            <returns></returns>
        </member>
        <member name="M:lib12.Crypto.SaltedHash.ComputeHash(System.String,System.String)">
            <summary>
            Computes the hash.
            </summary>
            <param name="salt">The salt.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:lib12.Crypto.SaltedHash.Verify(System.String,System.String,System.String)">
            <summary>
            Verifies if hash matches salted password
            </summary>
            <param name="salt">The salt.</param>
            <param name="hash">The hash.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="P:lib12.Data.QueryBuilding.Structures.BaseQueryStructure.Table">
            <summary>
            Gets or sets the main table.
            </summary>
            <value>
            The main table.
            </value>
        </member>
        <member name="P:lib12.Data.QueryBuilding.Structures.BaseQueryStructure.MainCondition">
            <summary>
            Gets or sets the main WHERE condition.
            </summary>
            <value>
            The main condition.
            </value>
        </member>
        <member name="T:lib12.Data.QueryBuilding.Structures.Update.SetField">
            <summary>
            Represents set field in update command
            </summary>
        </member>
        <member name="M:lib12.Data.QueryBuilding.Structures.Update.SetField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:lib12.Data.QueryBuilding.Structures.Update.SetField"/> class.
            </summary>
        </member>
        <member name="M:lib12.Data.QueryBuilding.Structures.Update.SetField.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:lib12.Data.QueryBuilding.Structures.Update.SetField"/> class.
            </summary>
            <param name="field">The field name.</param>
            <param name="value">The field value.</param>
        </member>
        <member name="P:lib12.Data.QueryBuilding.Structures.Update.SetField.Field">
            <summary>
            Gets or sets the field name.
            </summary>
            <value>
            The field.
            </value>
        </member>
        <member name="P:lib12.Data.QueryBuilding.Structures.Update.SetField.Value">
            <summary>
            Gets or sets the field value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:lib12.Data.QueryBuilding.Structures.Update.UpdateQueryStructure">
            <summary>
            Represents update command that is currently build
            </summary>
        </member>
        <member name="P:lib12.Data.QueryBuilding.Structures.Update.UpdateQueryStructure.SetFields">
            <summary>
            Gets or sets the set fields.
            </summary>
            <value>
            The set fields.
            </value>
        </member>
        <member name="T:lib12.Reflection.CreateTypeAttribute">
            <summary>
            Describes which type is associated with enum
            </summary>
        </member>
        <member name="T:lib12.Extensions.DateTimeExtension">
            <summary>
            Extensions for System.DateTime
            </summary>
        </member>
        <member name="M:lib12.Extensions.DateTimeExtension.ToUnixTimeStamp(System.DateTime)">
            <summary>
            Converts given DateTime to Unix time stamp - number of seconds from 1970-01-01
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:lib12.Extensions.DateTimeExtension.ParseUnixTimeStamp(System.Int64)">
            <summary>
            Parse Unix time stamp - number of seconds from 1970-01-01 - to System.DateTime
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:lib12.Extensions.EventHandlerExtension.Raise(System.EventHandler,System.Object)">
            <summary>
            Raises the event
            </summary>
            <param name="handler">The event to rise</param>
            <param name="sender">The sender object</param>
        </member>
        <member name="M:lib12.Extensions.EventHandlerExtension.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Raises the event
            </summary>
            <param name="handler">The event to rise</param>
            <param name="sender">The sender object</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:lib12.Extensions.EventHandlerExtension.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raises the event
            </summary>
            <param name="handler">The event to rise</param>
            <param name="sender">The sender object</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:lib12.Core.Math2.Next(System.Int32,System.Int32)">
            <summary>
            Returns next number from specified set
            </summary>
            <param name="number">Current number</param>
            <param name="limit">Limit</param>
        </member>
        <member name="M:lib12.Core.Math2.Prev(System.Int32,System.Int32)">
            <summary>
            Returns previous number from specified set
            </summary>
            <param name="number">Current number</param>
            <param name="limit">Limit</param>
        </member>
        <member name="M:lib12.Core.Math2.DivWithZero(System.Double,System.Double)">
            <summary>
            Try to divide two numbers, if impossible returns 0
            </summary>
            <param name="a">Number to divide</param>
            <param name="b">Number to divide by</param>
            <returns></returns>
        </member>
        <member name="M:lib12.Core.Math2.Iv(System.Boolean)">
            <summary>
            Iverson notation - if condition is true returns 1, otherwise 0
            </summary>
            <param name="condition">The condition.</param>
            <returns></returns>
        </member>
        <member name="T:lib12.Reflection.ExpressionExtension">
            <summary>
            Extension methods for Expression class
            </summary>
        </member>
        <member name="M:lib12.Reflection.ExpressionExtension.GetName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the name of property using in expression.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:lib12.Reflection.ExpressionExtension.GetValue``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``0)">
            <summary>
            Gets the value of given expression for source
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="expression">The expression.</param>
            <param name="source">The source of value.</param>
            <returns></returns>
        </member>
        <member name="M:lib12.Reflection.ExpressionExtension.SetValue``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``0,``1)">
            <summary>
            Sets the value for given expression
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="expression">The expression.</param>
            <param name="source">The source.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:lib12.Reflection.FieldInfoExtension.GetAttribute``1(System.Reflection.FieldInfo)">
            <summary>
            Gets the attribute decorating given property
            </summary>
            <param name="propertyinfo">The property to check</param>
            <returns></returns>
        </member>
        <member name="M:lib12.Extensions.NullableBoolExtension.IsTrue(System.Nullable{System.Boolean})">
            <summary>
            Determines whether the specified nullable is not null and true.
            </summary>
            <param name="nullable">The nullable to check</param>
        </member>
        <member name="M:lib12.Extensions.NullableBoolExtension.IsTrueOrNull(System.Nullable{System.Boolean})">
            <summary>
            Determines whether the specified nullable is null or not null and true.
            </summary>
            <param name="nullable">The nullable to check</param>
        </member>
        <member name="M:lib12.Extensions.NullableBoolExtension.IsFalse(System.Nullable{System.Boolean})">
            <summary>
            Determines whether the specified nullable is not null and false.
            </summary>
            <param name="nullable">The nullable to check</param>
        </member>
        <member name="M:lib12.Extensions.NullableBoolExtension.IsFalseOrNull(System.Nullable{System.Boolean})">
            <summary>
            Determines whether the specified nullable is null or not null and false.
            </summary>
            <param name="nullable">The nullable to check</param>
        </member>
        <member name="M:lib12.Extensions.ObjectExtension.Null(System.Object)">
            <summary>
            Check if given object is null
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:lib12.Extensions.ObjectExtension.NotNull``1(``0)">
            <summary>
            Check if given object is not null
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:lib12.Extensions.ObjectExtension.NullResult.ThrowException">
            <summary>
            Throw exception if checked object is null
            </summary>
        </member>
        <member name="M:lib12.Reflection.PropertyInfoExtension.GetAttribute``1(System.Reflection.PropertyInfo)">
            <summary>
            Gets the attribute decorating given property
            </summary>
            <param name="propertyinfo">The property to check</param>
            <returns></returns>
        </member>
        <member name="T:lib12.Core.TimesLoop">
            <summary>
            Times loop - calls given function X times
            </summary>
        </member>
        <member name="M:lib12.Reflection.TypeExtension.IsTypeNumericOrNullableNumeric(System.Type)">
            <summary>
            Determines whether the specified type is numeric or nullable numeric
            </summary>
            <param name="type">The type to check</param>
            <returns></returns>
        </member>
        <member name="M:lib12.Reflection.TypeExtension.IsTypeNumeric(System.Type)">
            <summary>
            Determines whether the specified type is numeric
            </summary>
            <param name="type">The type to check</param>
            <returns></returns>
        </member>
        <member name="M:lib12.Reflection.TypeExtension.IsNullable(System.Type)">
            <summary>
            Determines whether the specified type nullable
            </summary>
            <param name="type">The type to check</param>
            <returns></returns>
        </member>
        <member name="M:lib12.Reflection.TypeExtension.GetAttribute``1(System.Type)">
            <summary>
            Gets the attribute decorating given type
            </summary>
            <param name="type">The type to check</param>
            <returns></returns>
        </member>
        <member name="M:lib12.Reflection.TypeExtension.GetDefault(System.Type)">
            <summary>
            Gets the default of given type
            </summary>
            <param name="type">The type to operate</param>
            <returns></returns>
        </member>
        <member name="M:lib12.Reflection.TypeExtension.GetDefaultConstructor(System.Type)">
            <summary>
            Gets the default, parameterless constructor of given type or null if this not exist
            </summary>
            <param name="type">The type to operate</param>
            <returns></returns>
        </member>
        <member name="M:lib12.Data.Dummy.RandomExtension.NextBool(System.Random)">
            <summary>
            Returns a random boolean value
            </summary>
            <param name="random">Random object</param>
            <returns>Random boolean value</returns>
        </member>
        <member name="M:lib12.Data.Dummy.RandomExtension.NextBool(System.Random,System.Int32)">
            <summary>
            Returns a random boolean value with setted percent for true
            </summary>
            <param name="random">Random object</param>
            <param name="percentForTrue">Percent for generating true value</param>
            <returns>Random boolean value</returns>
        </member>
        <member name="M:lib12.Data.Dummy.RandomExtension.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
            Returns a double value between provided range
            </summary>
            <param name="random">Random object</param>
            <param name="start">Inclusive minimum value</param>
            <param name="end">Inclusive maximum value</param>
            <returns>Random double value between provided range</returns>
        </member>
        <member name="M:lib12.Data.Dummy.RandomExtension.NextLowercaseLetter(System.Random)">
            <summary>
            Returns a lowercase letter
            </summary>
            <param name="random">Random object</param>
            <returns>Lowercase letter</returns>
        </member>
        <member name="M:lib12.Data.Dummy.RandomExtension.NextString(System.Random)">
            <summary>
            Returns a random string
            </summary>
            <param name="random">Random object</param>
            <returns>Random string</returns>
        </member>
        <member name="M:lib12.Data.Dummy.RandomExtension.NextString(System.Random,System.Int32)">
            <summary>
            Returns a random string with provided length
            </summary>
            <param name="random">Random object</param>
            <param name="length">Returned string length</param>
            <returns>Random string with provided length</returns>
        </member>
        <member name="M:lib12.Data.Dummy.RandomExtension.NextDateTime(System.Random,System.DateTime,System.DateTime)">
            <summary>
            Returns a random DateTime between provided range
            </summary>
            <param name="random">Random object</param>
            <param name="from">Start date</param>
            <param name="to">End date</param>
            <returns>Random DateTime between provided range</returns>
        </member>
        <member name="T:lib12.Data.QueryBuilding.Builders.SqlBuilder">
            <summary>
            Fluent sql commands builder
            </summary>
        </member>
        <member name="P:lib12.Data.QueryBuilding.Builders.SqlBuilder.Select">
            <summary>
            Builds select query
            </summary>
        </member>
        <member name="P:lib12.Data.QueryBuilding.Builders.SqlBuilder.Update">
            <summary>
            Builds update command
            </summary>
        </member>
        <member name="P:lib12.Data.QueryBuilding.Builders.SqlBuilder.Delete">
            <summary>
            Builds delete command
            </summary>
        </member>
        <member name="P:lib12.Data.QueryBuilding.Builders.SqlBuilder.Insert">
            <summary>
            Builds insert command
            </summary>
        </member>
        <member name="M:lib12.IO.IOHelper.GetAppDataPath">
            <summary>
            Gets the application data path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:lib12.IO.IOHelper.CreateDirectoryIfNotExist(System.String)">
            <summary>
            Creates the directory if not exist.
            </summary>
            <param name="path">The path to directory to check</param>
        </member>
        <member name="M:lib12.IO.IOHelper.GetDefaultPath">
            <summary>
            Gets the default path of current computer - first hard drive's root
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
